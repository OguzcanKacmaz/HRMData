// <auto-generated />
using System;
using HRMData.WEB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HRMData.Persistence.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230321172456_mig_1")]
    partial class mig_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HRMData.Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d6d17082-dcb2-4074-9a97-eb66f8b0b575",
                            ConcurrencyStamp = "3c9b60b1-a70c-4819-a15f-7cbf73424661",
                            Name = "Personel",
                            NormalizedName = "PERSONEL"
                        },
                        new
                        {
                            Id = "b25745ce-4947-4d2e-b6b7-a3fbd7d0f47c",
                            ConcurrencyStamp = "0cef9786-be5d-4516-94d3-3127a493e068",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "f670346d-4028-4cdb-adcf-8b510ebf4218",
                            ConcurrencyStamp = "c8eb3d15-23c2-4dfc-b1c8-dfcdc865fb51",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("HRMData.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0a789736-bc55-4a59-8b8c-0cc5609abc92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1aa02ea6-2bd0-42d6-a8a5-2b2b121361d8",
                            Email = "mustafaoguzcan.kacmaz@bilgeadamboost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            LockoutEnd = new DateTimeOffset(new DateTime(2023, 3, 21, 20, 24, 56, 362, DateTimeKind.Unspecified).AddTicks(2629), new TimeSpan(0, 3, 0, 0, 0)),
                            NormalizedEmail = "MUSTAFAOGUZCAN.KACMAZ@BILGEADAMBOOST.COM",
                            NormalizedUserName = "MUSTAFAOGUZCAN.KACMAZ@BILGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBFHO36ceHPsvTOxqxkgyD4kX0+JMI+qqFjjxL2cO+Fjo6AwJ6p45Vptgh//3WQcyg==",
                            PhoneNumber = "5375988848",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "ca08f248-1c1c-4685-8546-a22781f27999",
                            TwoFactorEnabled = false,
                            UserName = "mustafaoguzcan.kacmaz@bilgeadamboost.com"
                        });
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Company", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyTitle")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<int>("FoundationYear")
                        .HasColumnType("int");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoMini")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Address = "Ankara",
                            CompanyTitle = 0,
                            ContractEndDate = new DateTime(2053, 3, 21, 20, 24, 56, 361, DateTimeKind.Local).AddTicks(2414),
                            ContractStartDate = new DateTime(2013, 3, 21, 20, 24, 56, 361, DateTimeKind.Local).AddTicks(2405),
                            Email = "boost@bilgeadamboost.com",
                            EmployeeCount = 3,
                            FoundationYear = 2012,
                            IsActive = 1,
                            Logo = "ba_logo.png",
                            LogoMini = "ba_logomini.png",
                            MersisNo = "0153318035900015",
                            Name = "Bilge adam Boost",
                            PhoneNumber = "444 33 30",
                            TaxAdministration = "Çankaya Vergi Dairesi",
                            TaxNumber = "1533180359"
                        });
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("DisplayName", "Departman Adı");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = "71fda0a6-9f0d-4d34-8c72-482ccf44a625",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "İdari Kadro"
                        },
                        new
                        {
                            Id = "6a8f6e32-0a60-4f9f-b7d8-9c5b7d5db5d5",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "Bilişim Teknolojileri"
                        },
                        new
                        {
                            Id = "e1f6c71b-9302-4c4e-b3f4-ae0b6f20a6f1",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "Finans Müdürlüğü"
                        },
                        new
                        {
                            Id = "497cccbf-6f81-46a9-bb91-526aa9c9d2d2",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "İnsan Kaynakları"
                        },
                        new
                        {
                            Id = "44c85d08-371e-4a22-81a8-63ec12162b89",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "Kurumsal İletişim"
                        },
                        new
                        {
                            Id = "a535e0d9-9f17-4a37-ae90-d29e5f5d25e5",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "Muhasebe Müdürlüğü"
                        },
                        new
                        {
                            Id = "3c3d4dc4-bd26-4a96-a44a-59f1ec7741a7",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            Name = "Satınalma Müdürlüğü"
                        });
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Adres");

                    b.Property<double>("AnnualLeaveDays")
                        .HasColumnType("float");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasAnnotation("DisplayName", "Doğum Tarihi");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ExcusedAbsenceDay")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Ad");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("DisplayName", "İşe Giriş Tarihi");

                    b.Property<int>("IsActive")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Aktiflik Durumu");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Soyad");

                    b.Property<decimal>("MaxPaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("DisplayName", "Maksimum Avans Miktarı");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "İkinci Ad");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Fotoğraf");

                    b.Property<string>("PhotoMini")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Doğum Yeri");

                    b.Property<bool>("RandomPassword")
                        .HasColumnType("bit");

                    b.Property<decimal>("RemainingAdvanceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("DisplayName", "Kalan Avans Miktarı");

                    b.Property<double>("RemainingAnnualLeaveDays")
                        .HasColumnType("float");

                    b.Property<DateTime>("ResetDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("DisplayName", "Maaş");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "İkinci Soyad");

                    b.Property<string>("TcIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasAnnotation("DisplayName", "TC Kimlik No");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("DisplayName", "İşten Çıkış Tarihi");

                    b.Property<string>("TitleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TcIdentificationNumber")
                        .IsUnique();

                    b.HasIndex("TitleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "417b8151-ff69-4511-b91e-fe8d114c47a0",
                            Address = "Ankara",
                            AnnualLeaveDays = 14.0,
                            AppUserId = "0a789736-bc55-4a59-8b8c-0cc5609abc92",
                            CompanyId = "deffb8e3-228d-465a-a118-76d75523bacc",
                            DateOfBirth = new DateTime(1992, 3, 30, 0, 45, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = "497cccbf-6f81-46a9-bb91-526aa9c9d2d2",
                            ExcusedAbsenceDay = 1.0,
                            FirstName = "Mustafa",
                            Gender = 1,
                            HireDate = new DateTime(2021, 8, 30, 14, 12, 22, 0, DateTimeKind.Unspecified),
                            IsActive = 1,
                            LastName = "Kaçmaz",
                            MaxPaymentAmount = 45000m,
                            MiddleName = "Oğuzcan",
                            Photo = "default.jpg",
                            PhotoMini = "defaultmini.jpg",
                            PlaceOfBirth = "Düzce",
                            RandomPassword = false,
                            RemainingAdvanceAmount = 45000m,
                            RemainingAnnualLeaveDays = 14.0,
                            ResetDate = new DateTime(2023, 8, 30, 14, 12, 22, 0, DateTimeKind.Unspecified),
                            Salary = 15000m,
                            TcIdentificationNumber = "47830698410",
                            TitleId = "33c1ee1f-caff-4b7a-a2c5-2b71c5ee9ef5"
                        });
                });

            modelBuilder.Entity("HRMData.Domain.Entities.EmployeeAdvance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AdvancePaymentType")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Avans Türü");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("DisplayName", "Avans Tutarı");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Onay Durumu");

                    b.Property<int>("Currency")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Para Birimi");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Açıklama");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("DisplayName", "Cevaplanma Tarihi");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("DisplayName", "Avans Tarihi");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAdvances");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.EmployeeExpense", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("DisplayName", "Harcama Tutarı");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Onay Durumu");

                    b.Property<int>("Currency")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Para Birimi");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ExpenseDocument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("DisplayName", "Harcama Dökümanı");

                    b.Property<int>("ExpenseType")
                        .HasColumnType("int")
                        .HasAnnotation("DisplayName", "Harcama Türü");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("DisplayName", "Cevaplanma Tarihi");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("DisplayName", "Harcama Tarihi");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeExpenses");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.EmployeePermissionRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("NumOfDays")
                        .HasColumnType("float");

                    b.Property<int>("PermissionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePermissionRequest");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.PermissionRequestNumOfDays", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AntenatalLeaveDay")
                        .HasColumnType("int");

                    b.Property<int>("BereavementLeaveDay")
                        .HasColumnType("int");

                    b.Property<int>("MarriageLeaveDay")
                        .HasColumnType("int");

                    b.Property<int>("PaternityLeaveDay")
                        .HasColumnType("int");

                    b.Property<int>("PostnatalLeaveDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PermissionRequestNumOfDays");

                    b.HasData(
                        new
                        {
                            Id = "de54e229-5abf-4a8a-bb1b-587dd7c384a4",
                            AntenatalLeaveDay = 56,
                            BereavementLeaveDay = 3,
                            MarriageLeaveDay = 3,
                            PaternityLeaveDay = 5,
                            PostnatalLeaveDay = 56
                        });
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Title", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("DisplayName", "Meslek Adı");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            Id = "93f066be-7e51-4653-9fb5-7240b32f45d1",
                            Name = "Asistan"
                        },
                        new
                        {
                            Id = "5cb4d40a-ea75-434c-8df5-f907889d243f",
                            Name = "Avukat"
                        },
                        new
                        {
                            Id = "e82c0639-096f-41ff-87bf-07d977e83760",
                            Name = "Bilişim Teknolojileri Teknik Uzmanı"
                        },
                        new
                        {
                            Id = "29a69de2-34be-4469-8ef2-487687dbf893",
                            Name = "Büro Memuru"
                        },
                        new
                        {
                            Id = "7205f8f0-1969-4f48-ade2-2098a53c7de4",
                            Name = "Danışma Görevlisi"
                        },
                        new
                        {
                            Id = "702453f6-884d-43cd-b8bd-bdf7c3afd665",
                            Name = "Finans Uzmanı"
                        },
                        new
                        {
                            Id = "6fac572c-01ce-41f0-acf4-759bfe90bc8f",
                            Name = "Finansal Muhasebe Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "22aaccfc-7d78-4fbd-8039-fbc4f8390200",
                            Name = "Genel Müdür İş Asistanı"
                        },
                        new
                        {
                            Id = "84641b54-5f34-4638-a96c-583aec81936b",
                            Name = "Hemşire"
                        },
                        new
                        {
                            Id = "57276753-fee5-40f5-adee-75dca9469ef9",
                            Name = "İdari İşler Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "a796d723-e214-4705-bb61-c7999f48d0e5",
                            Name = "İdari İşler Uzmanı"
                        },
                        new
                        {
                            Id = "b661637b-5c68-4a5f-9da6-200b92129c1d",
                            Name = "İdari İşler Yöneticisi"
                        },
                        new
                        {
                            Id = "f04b2d49-a5e0-4ea7-8b5f-019c98b8cdc7",
                            Name = "İş Sağlığı ve Güvenliği Uzmanı"
                        },
                        new
                        {
                            Id = "bc437ab5-957d-4c3d-af7d-3dd2197d6b5f",
                            Name = "Lojistik İşler Görevlisi"
                        },
                        new
                        {
                            Id = "6b661537-5ead-41e3-8e71-c2879381198d",
                            Name = "Tedarik Uzmanı"
                        },
                        new
                        {
                            Id = "0d5a085c-bbbb-4b38-aece-b55b72f072d3",
                            Name = "Bilişim Teknolojileri Direktörü"
                        },
                        new
                        {
                            Id = "481c0e34-c1ed-49a1-bc5b-36336957c38d",
                            Name = "Bilişim Teknolojileri Saha Sorumlusu"
                        },
                        new
                        {
                            Id = "a4b72db3-9ca2-4a3d-b7c9-58f8ee58bb94",
                            Name = "Bilişim Teknolojileri Saha Uzmanı"
                        },
                        new
                        {
                            Id = "a77ac15b-468f-42da-a2ee-d6c74b907e2b",
                            Name = "Bilişim Teknolojileri Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "cee31a14-ba0c-493f-8aca-bc10b5c08351",
                            Name = "Dijital Ürün Yöneticisi"
                        },
                        new
                        {
                            Id = "42f13044-542a-4092-9fb3-8ac3ab4eaf15",
                            Name = "IT Koordinatörü"
                        },
                        new
                        {
                            Id = "160225f2-2e8d-4736-bf9a-95fea1f5b7c2",
                            Name = "Sistem Uzmanı"
                        },
                        new
                        {
                            Id = "efdd1ac0-2209-428a-bd8e-e0cac6b9f2e2",
                            Name = "Sistem ve Network Yöneticisi"
                        },
                        new
                        {
                            Id = "40028b09-d643-4cf1-9daa-b926a5ffece7",
                            Name = "Web Sitesi Sorumlusu"
                        },
                        new
                        {
                            Id = "b91cade2-8497-4bbd-bb70-9fce1ca2b316",
                            Name = "Yazılım Uzmanı"
                        },
                        new
                        {
                            Id = "cf9b363a-a738-4787-8f97-c5378b650829",
                            Name = "Bütçe ve Finans Müdürü"
                        },
                        new
                        {
                            Id = "e00d2c43-84ca-4d61-99d1-32949b430460",
                            Name = "Bütçe ve Raporlama Müdürü"
                        },
                        new
                        {
                            Id = "85a5f33b-b50e-47f2-af2e-626134090348",
                            Name = "Finans Direktörü"
                        },
                        new
                        {
                            Id = "401dbd73-d16e-471f-9fd1-f5d71312c0ec",
                            Name = "Finans Müdür Yardımcısı"
                        },
                        new
                        {
                            Id = "4b7daaef-d5ba-41cc-8d6f-168df13e4425",
                            Name = "Finans Müdürü"
                        },
                        new
                        {
                            Id = "cd980cb4-705f-42f4-9907-6fc60cea53e4",
                            Name = "Finans Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "a79cb6c6-bdd0-440e-8cc1-505414cb93da",
                            Name = "Finans Yöneticisi"
                        },
                        new
                        {
                            Id = "ebdb020b-432c-4d3f-91c1-cf3ce26850a0",
                            Name = "Finansal Kontrol Müdürü"
                        },
                        new
                        {
                            Id = "cb769b74-ec29-4098-9176-1c492bde5aeb",
                            Name = "Bordro Müdürü"
                        },
                        new
                        {
                            Id = "adca1c96-626c-4729-8424-5e834ecfb0da",
                            Name = "Bordro Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "de8fd884-6ad4-4025-b577-ae6713183004",
                            Name = "Bordro Uzmanı"
                        },
                        new
                        {
                            Id = "4f321f30-1509-497f-81c7-3d46f5452024",
                            Name = "Bordro Yöneticisi"
                        },
                        new
                        {
                            Id = "7e09e04e-591a-44a5-bb53-813e54ec3776",
                            Name = "İnsan Kaynakları Direktörü"
                        },
                        new
                        {
                            Id = "d5ec3d03-e41d-4d4f-8aa3-9b138ec8f0c3",
                            Name = "İnsan Kaynakları Koordinatörü"
                        },
                        new
                        {
                            Id = "33c1ee1f-caff-4b7a-a2c5-2b71c5ee9ef5",
                            Name = "İnsan Kaynakları Müdürü"
                        },
                        new
                        {
                            Id = "cd25e72f-b47f-4fa5-9a7c-7ebc1211346c",
                            Name = "İnsan Kaynakları Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "23c45285-ccd0-4dd5-8d0d-41927fca9cea",
                            Name = "İnsan Kaynakları Uzmanı"
                        },
                        new
                        {
                            Id = "fc63563d-260b-401e-be9a-4d573d930f08",
                            Name = "İnsan Kaynakları Yöneticisi"
                        },
                        new
                        {
                            Id = "8510bcc9-7951-420a-9838-518aac8f9b1d",
                            Name = "Basın İletişim Direktörü"
                        },
                        new
                        {
                            Id = "b3e773e6-9eb4-4fe1-87d2-03430c401978",
                            Name = "Grafiker"
                        },
                        new
                        {
                            Id = "39ed7a28-18da-4cdb-8069-5378da250bd6",
                            Name = "İçerik ve Proje Koordinatörü"
                        },
                        new
                        {
                            Id = "e33213db-ad5b-4d4d-b502-f05cbc0e0dd3",
                            Name = "İletişim Uzmanı"
                        },
                        new
                        {
                            Id = "adb5a4d0-0ff1-48ac-b757-d2e81025ca8e",
                            Name = "İş Geliştirme Koordinatörü"
                        },
                        new
                        {
                            Id = "88b192ae-4b51-494b-94b8-1308d85a184b",
                            Name = "Kurumsal Etkinlik ve Organizasyon Direktörü"
                        },
                        new
                        {
                            Id = "ca0741ff-9214-4fc6-944c-8f8f483b6137",
                            Name = "Kurumsal Gelişim Direktörü"
                        },
                        new
                        {
                            Id = "4dc2df71-1706-468d-bd33-518323d5e771",
                            Name = "Kurumsal Gelişim Müdürü"
                        },
                        new
                        {
                            Id = "961d3464-fde5-4ad9-87a2-02b7f1113974",
                            Name = "Kurumsal İletişim Müdürü"
                        },
                        new
                        {
                            Id = "799622e0-de10-432c-af6c-d00f132e993a",
                            Name = "Kurumsal İletişim Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "52165ed6-afe0-4a2d-a1dc-a0a3665c6e1c",
                            Name = "Kurumsal İletişim Uzmanı"
                        },
                        new
                        {
                            Id = "2d330576-bada-4700-837c-2ecb967bd698",
                            Name = "Kurumsal İletişim Yöneticisi"
                        },
                        new
                        {
                            Id = "880adb3c-d70d-43e4-9184-8057ace8af51",
                            Name = "Kurumsal Proje Yöneticisi"
                        },
                        new
                        {
                            Id = "9f7681e3-8b99-4270-97e8-319abd1235de",
                            Name = "Yeni Medya ve Kreatif Direktörü"
                        },
                        new
                        {
                            Id = "5563f840-ca72-4393-b701-cbc53e07e418",
                            Name = "Finansal Muhasebe Uzmanı"
                        },
                        new
                        {
                            Id = "0697a9f9-8218-435c-bfcd-b8c42b560296",
                            Name = "Muhasebe Grup Müdürü"
                        },
                        new
                        {
                            Id = "0cd88580-c32f-4cd6-a492-02c35c0cbf2d",
                            Name = "Muhasebe Müdür Yardımcısı"
                        },
                        new
                        {
                            Id = "84d077dd-5213-42b5-9d21-35f4d4d4cc35",
                            Name = "Muhasebe Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "9e0c035a-2c0f-4b98-a778-5ef0304d734a",
                            Name = "Muhasebe Uzmanı"
                        },
                        new
                        {
                            Id = "ae683088-15c5-4738-8d2c-741d739a46f4",
                            Name = "Muhasebe Yöneticisi"
                        },
                        new
                        {
                            Id = "37adb675-5ed4-4677-8322-3897b9994e17",
                            Name = "Depo Sorumlusu"
                        },
                        new
                        {
                            Id = "e66b21c3-5bd0-4b4f-b2b5-b2b8934ce601",
                            Name = "İnşaat Birim Yöneticisi"
                        },
                        new
                        {
                            Id = "0f5df388-47a3-4153-a1dc-537f9cdf2ae9",
                            Name = "İnşaat Mühendisi"
                        },
                        new
                        {
                            Id = "698a4bec-7995-4dbb-b7d0-8f2757c6d3d7",
                            Name = "Satınalma Müdürü"
                        },
                        new
                        {
                            Id = "a9e37713-8280-47a7-ada7-2c84d5e622cf",
                            Name = "Satınalma Uzman Yardımcısı"
                        },
                        new
                        {
                            Id = "c06c7891-99e8-46ea-8186-1b997e51ab61",
                            Name = "Satınalma Uzmanı"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0a789736-bc55-4a59-8b8c-0cc5609abc92",
                            RoleId = "f670346d-4028-4cdb-adcf-8b510ebf4218"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Department", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Employee", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("HRMData.Domain.Entities.Employee", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMData.Domain.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HRMData.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HRMData.Domain.Entities.Title", null)
                        .WithMany("Employees")
                        .HasForeignKey("TitleId");

                    b.Navigation("AppUser");

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.EmployeeAdvance", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.Employee", "Employee")
                        .WithMany("Advances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.EmployeeExpense", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.Employee", "Employee")
                        .WithMany("Expense")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.EmployeePermissionRequest", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.Employee", "Employee")
                        .WithMany("PermissionRequest")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HRMData.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HRMData.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HRMData.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Company", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expense");

                    b.Navigation("PermissionRequest");
                });

            modelBuilder.Entity("HRMData.Domain.Entities.Title", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
